diff --git a/assets/css/readmore.css b/assets/css/readmore.css
new file mode 100644
index 0000000..d55b488
--- /dev/null
+++ b/assets/css/readmore.css
@@ -0,0 +1,3 @@
+.readmore-text {
+  display: none;
+}
diff --git a/assets/js/readmore.js b/assets/js/readmore.js
new file mode 100644
index 0000000..46e32d3
--- /dev/null
+++ b/assets/js/readmore.js
@@ -0,0 +1,37 @@
+(function ($, Drupal) {
+  "use strict";
+
+  /**
+   * Behavior to initialize "Read more" and "Read less" links.
+   *
+   * @type {{attach: Drupal.behaviors.initReadmoreLinks.attach}}
+   */
+  Drupal.behaviors.initReadmoreLinks = {
+    attach: function (context, settings) {
+      $(context)
+        .find('.readmore-summary .readmore-link')
+        .once('init-readmore-links')
+        .each(function () {
+          $(this).click(function () {
+            var summary = $(this).closest('.readmore-summary');
+            summary.hide();
+            summary.next('.readmore-text').slideDown(100);
+            return false;
+          });
+        });
+
+      $(context)
+        .find('.readmore-text .readless-link')
+        .once('init-readmore-links')
+        .each(function () {
+          $(this).click(function () {
+            var text = $(this).closest('.readmore-text');
+            text.slideUp(100);
+            text.prev('.readmore-summary').slideDown(100);
+            return false;
+          });
+        });
+    }
+  };
+
+})(jQuery, Drupal);
diff --git a/composer.json b/composer.json
new file mode 100644
index 0000000..ae603de
--- /dev/null
+++ b/composer.json
@@ -0,0 +1,12 @@
+{
+  "name": "drupal/readmore",
+  "description": "Add 'read more' field formatter.",
+  "type": "drupal-module",
+  "homepage": "https://www.drupal.org/project/readmore",
+  "support": {
+    "issues": "https://www.drupal.org/project/readmore",
+    "source": "https://cgit.drupalcode.org/readmore"
+  },
+  "license": "GPL-2.0+",
+  "minimum-stability": "dev"
+}
diff --git a/js/readmore.js b/js/readmore.js
deleted file mode 100644
index f52e6fc..0000000
--- a/js/readmore.js
+++ /dev/null
@@ -1,21 +0,0 @@
-(function($) {
-    Drupal.behaviors.readmore = {
-        attach: function(context, settings) {
-            $('.readmore-summary .readmore-link').click(function(e) {
-                e.preventDefault();
-                var summary = $(this).closest('.readmore-summary');
-                summary.hide();
-                summary.next('.readmore-text').slideDown(300);
-            });
-            $('.readmore-text .readless-link').click(function(e) {
-                e.preventDefault();
-                var text = $(this).closest('.readmore-text');
-                text.slideUp(300);
-                text.prev('.readmore-summary').slideDown(300);
-            });
-        }
-    };
-})(jQuery);
-
-
-
diff --git a/lib/Drupal/readmore/Plugin/Field/FieldFormatter/ReadmoreFormatter.php b/lib/Drupal/readmore/Plugin/Field/FieldFormatter/ReadmoreFormatter.php
deleted file mode 100644
index eb5698b..0000000
--- a/lib/Drupal/readmore/Plugin/Field/FieldFormatter/ReadmoreFormatter.php
+++ /dev/null
@@ -1,255 +0,0 @@
-<?php
-
-/**
- * @file
- * Contains \Drupal\readmore\Plugin\field\formatter\ReadmoreFormatter.
- */
-
-namespace Drupal\readmore\Plugin\Field\FieldFormatter;
-
-use Drupal\Core\Field\FieldItemListInterface;
-use Drupal\Core\Field\FormatterBase;
-use Drupal\Component\Utility\Html;
-
-/**
- * Plugin implementation of the 'readmore' formatter.
- *
- * @FieldFormatter(
- *   id = "readmore",
- *   label = @Translation("Readmore"),
- *   field_types = {
- *     "text",
- *     "text_long",
- *     "text_with_summary"
- *   },
- *   settings = {
- *     "trim_length" = "500",
- *     "readmore_trim_on_break" = FALSE,
- *     "readmore_show_readless" = FALSE,
- *     "readmore_ellipsis" = FALSE,
- *     "readmore_wordsafe" = FALSE
- *   }
- * )
- */
-class ReadmoreFormatter extends FormatterBase {
-
-  /**
-   * {@inheritdoc}
-   */
-  public function settingsForm(array $form, array &$form_state) {
-    $elements = parent::settingsForm($form, $form_state);
-
-    $elements['trim_length'] = array(
-      '#type' => 'number',
-      '#title' => t('Trim link text length'),
-      '#field_suffix' => t('characters'),
-      '#default_value' => $this->getSetting('trim_length'),
-      '#min' => 1,
-      '#description' => t('Leave blank to allow unlimited link text lengths.'),
-    );
-    $elements['readmore_trim_on_break'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Trim on @break', array('@break' => '<!--break-->')),
-      '#description' => t('If @break not found in the text then trim length used.', array('@break' => '<!--break-->')),
-      '#default_value' => $this->getSetting('readmore_trim_on_break'),
-    );
-    $elements['readmore_show_readless'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Show read less'),
-      '#default_value' => $this->getSetting('readmore_show_readless'),
-    );
-    $elements['readmore_ellipsis'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Add ellipsis'),
-      '#default_value' => $this->getSetting('readmore_ellipsis'),
-    );
-    $elements['readmore_wordsafe'] = array(
-      '#type' => 'checkbox',
-      '#title' => t('Truncate on a word boundary'),
-      '#default_value' => $this->getSetting('readmore_wordsafe'),
-    );
-
-    return $elements;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function settingsSummary() {
-    $summary = array();
-
-    $settings = $this->getSettings();
-
-    if (!empty($settings['trim_length'])) {
-      $summary[] = t('Text trimmed to @limit characters', array('@limit' => $settings['trim_length']));
-      $summary[] = $settings['readmore_trim_on_break'] ? t('Trim on @break', array('@break' => '<!--break-->')) : t('Do not trim on @break', array('@break' => '<!--break-->'));
-      $summary[] = $settings['readmore_show_readless'] ? t('Show read less') : t('Do not show read less');
-      $summary[] = $settings['readmore_ellipsis'] ? t('Add ellipsis') : t('Do not add ellipsis');
-      $summary[] = $settings['readmore_wordsafe'] ? t('Safe words') : t('Do not safe words');
-    }
-    else {
-      $summary[] = t('Text not trimmed');
-    }
-
-    return $summary;
-  }
-
-  /**
-   * {@inheritdoc}
-   */
-  public function viewElements(FieldItemListInterface $items) {
-    $elements = array();
-    $settings = $this->getSettings();
-
-    $max_length = $settings['trim_length'];
-
-    foreach ($items as $delta => $item) {
-      $text = $item->processed;
-      $text_length = drupal_strlen($item->processed);
-      $trim_length = $settings['trim_length'];
-
-      // Don't do anything if text length less than defined.
-      if ($text_length > $trim_length) {
-        // Add Read less if need.
-        if ($settings['readmore_show_readless']) {
-          $text .= ' ' . l(t('Read less'), current_path(), array('attributes' => array('class' => array('readless-link'))));
-        }
-
-        // Get trimmed string.
-        $summary = $this->readmore_truncate_string(
-            $text, isset($item->format) ? $item->format : NULL, $trim_length, $settings['readmore_wordsafe'], $settings['readmore_trim_on_break']
-        );
-
-        // Add readmore link.
-        $summary .= '<span>';
-        $summary .= $settings['readmore_ellipsis'] ? t('...') : NULL;
-        $summary .= l(t('read more'), current_path(), array('attributes' => array('class' => array('readmore-link'))));
-        $summary .= '</span>';
-
-        // Close all HTML tags.
-        $summary = Html::normalize($summary);
-
-        $elements[$delta] = array(
-          '#theme' => 'readmore',
-          '#text' => $text,
-          '#summary' => $summary,
-          '#attached' => array(
-            'js' => array(
-              drupal_get_path('module', 'readmore') . '/js/readmore.js' => array(),
-            ),
-          ),
-        );
-        
-      }
-      else {
-        $elements[$delta] = array(
-          '#markup' => $text,
-        );
-      }
-    }
-
-    return $elements;
-  }
-
-  /**
-   * Truncate string by a number of characters.
-   *
-   * @param string $text
-   *   The string to truncate.
-   * @param string $format
-   *   The format of the content.
-   * @param int $size
-   *   An upper limit on the returned string length.
-   * @param bool $wordsafe
-   *   If TRUE, attempt to truncate on a word boundary.
-   *
-   * @return string
-   *   Return truncated string.
-   */
-  protected function readmore_truncate_string($text, $format = NULL, $size = NULL, $wordsafe = FALSE, $use_break = TRUE) {
-    if (!isset($size)) {
-      // If size is not set then use default.
-      $size = 500;
-    }
-
-    if ($use_break) {
-      // Find where the delimiter is in the body.
-      $delimiter = strpos($text, '<!--break-->');
-
-      if ($delimiter) {
-        // Set new size.
-        $size = $delimiter;
-      }
-    }
-
-    // We check for the presence of the PHP evaluator filter in the current
-    // format. If the body contains PHP code just return as is.
-    if (isset($format)) {
-      $filters = entity_load('filter_format', $format);
-      if (isset($filters) && $filters->status && strpos($text, '<?') !== FALSE) {
-       return $text;
-      }
-    }
-
-    // The summary may not be longer than maximum length specified. Initial slice.
-    $summary = truncate_utf8($text, $size, $wordsafe, FALSE);
-
-    if ($wordsafe) {
-      // Store the actual length of the truncated string.
-      $max_rpos = drupal_strlen($summary);
-
-      // How much to cut off the end of the summary so that it doesn't end in the
-      // middle of a paragraph, sentence, or word.
-      // Initialize it to maximum in order to find the minimum.
-      $min_rpos = $max_rpos;
-
-      // Store the reverse of the summary.
-      $reversed = strrev($summary);
-
-      // Build an array of arrays of break points grouped by preference.
-      $break_points = array();
-
-      // A paragraph near the end of sliced summary is most preferable.
-      $break_points[] = array('</p>' => 0);
-
-      // If no complete paragraph then treat line breaks as paragraphs.
-      $line_breaks = array('<br />' => 6, '<br>' => 4);
-      // Newline only indicates a line break if line break converter
-      // filter is present.
-      if (\Drupal::entityQuery('filter_format')->condition('format', 'filter_autop')->execute()) {
-        $line_breaks["\n"] = 1;
-      }
-      $break_points[] = $line_breaks;
-
-      // If the first paragraph is too long, split at the end of a sentence.
-      $break_points[] = array(
-        '. ' => 1,
-        '! ' => 1,
-        '? ' => 1,
-        '。' => 0,
-        '؟ ' => 1,
-      );
-
-      // Iterate over the groups of break points until a break point is found.
-      foreach ($break_points as $points) {
-        // Look for each break point, starting at the end of the summary.
-        foreach ($points as $point => $offset) {
-          // The summary is already reversed, but the break point isn't.
-          $rpos = strpos($reversed, strrev($point));
-          if ($rpos !== FALSE) {
-            $min_rpos = min($rpos + $offset, $min_rpos);
-          }
-        }
-
-        // If a break point was found in this group, slice and stop searching.
-        if ($min_rpos !== $max_rpos) {
-          // Don't slice with length 0. Length must be <0 to slice from RHS.
-          $summary = ($min_rpos === 0) ? $summary : drupal_substr($summary, 0, 0 - $min_rpos);
-          break;
-        }
-      }
-    }
-    return $summary;
-  }
-
-}
diff --git a/readmore.libraries.yml b/readmore.libraries.yml
new file mode 100644
index 0000000..8e5906d
--- /dev/null
+++ b/readmore.libraries.yml
@@ -0,0 +1,11 @@
+readmore:
+  css:
+    theme:
+      assets/css/readmore.css: {}
+  js:
+    assets/js/readmore.js: {}
+  dependencies:
+    - core/jquery
+    - core/drupal
+    - core/drupalSettings
+    - core/jquery.once
diff --git a/readmore.module b/readmore.module
index 8465b46..816c54f 100644
--- a/readmore.module
+++ b/readmore.module
@@ -2,17 +2,139 @@
 
 /**
  * @file
- * Basic functional for readmore module.
+ * Contains readmore module.
  */
 
+use Drupal\Component\Utility\Unicode;
+
 /**
  * Implements hook_theme().
  */
 function readmore_theme() {
-  return array(
-    'readmore' => array(
-      'template' => 'read-more',
-      'variables' => array('summary' => NULL, 'text' => NULL,),
-    )
-  );
-}
\ No newline at end of file
+  return [
+    'readmore' => [
+      'variables' => [
+        'summary' => NULL,
+        'text'    => NULL,
+      ],
+    ],
+  ];
+}
+
+/**
+ * Truncate string by a number of characters.
+ *
+ * @param string $text
+ *   The string to truncate.
+ * @param string $format
+ *   The format of the content.
+ * @param int $size
+ *   An upper limit on the returned string length.
+ * @param bool $wordsafe
+ *   If TRUE, attempt to truncate on a word boundary.
+ *
+ * @return string
+ *   Return truncated string.
+ */
+function readmore_truncate_string($text, $format = NULL, $size = NULL, $wordsafe = FALSE, $use_break = TRUE) {
+  if (!isset($size)) {
+    // If size is not set then use default.
+    $size = 500;
+  }
+
+  if ($use_break) {
+    // Find where the delimiter is in the body.
+    $delimiter = Unicode::strpos($text, '<!--break-->');
+
+    if ($delimiter) {
+      // Set new size.
+      $size = $delimiter;
+    }
+  }
+
+  // We check for the presence of the PHP evaluator filter in the current
+  // format. If the body contains PHP code just return as is.
+  $filters = [];
+  if (isset($format)) {
+    $filter_entities = \Drupal::entityTypeManager()
+      ->getStorage('filter_format')
+      ->loadByProperties(['status' => TRUE]);
+
+    foreach ($filter_entities as $filter) {
+      $filters[] = $filter->id();
+
+      if ($filter->id() == 'php_code' && strpos($text, '<?') !== FALSE) {
+        return $text;
+      }
+    }
+  }
+
+  // The summary may not be longer than maximum length specified. Initial slice.
+  $summary = Unicode::truncate($text, $size, $wordsafe, FALSE);
+
+  if ($wordsafe) {
+    // Store the actual length of the truncated string.
+    $max_rpos = Unicode::strlen($summary);
+
+    // How much to cut off the end of the summary so that it doesn't end in the
+    // middle of a paragraph, sentence, or word.
+    // Initialize it to maximum in order to find the minimum.
+    $min_rpos = $max_rpos;
+
+    // Store the reverse of the summary.
+    $reversed = strrev($summary);
+
+    // Build an array of arrays of break points grouped by preference.
+    $break_points = [];
+
+    // A paragraph near the end of sliced summary is most preferable.
+    $break_points[] = [
+      '</p>' => 0,
+    ];
+
+    // If no complete paragraph then treat line breaks as paragraphs.
+    $line_breaks = [
+      '<br />' => 6,
+      '<br>'   => 4,
+    ];
+
+    // Newline only indicates a line break if line break converter
+    // filter is present.
+    if (isset($filters['filter_autop'])) {
+      $line_breaks["\n"] = 1;
+    }
+
+    $break_points[] = $line_breaks;
+
+    // If the first paragraph is too long, split at the end of a sentence.
+    $break_points[] = [
+      '. ' => 1,
+      '! ' => 1,
+      '? ' => 1,
+      '。'  => 0,
+      '؟ ' => 1,
+    ];
+
+    // Iterate over the groups of break points until a break point is found.
+    foreach ($break_points as $points) {
+      // Look for each break point, starting at the end of the summary.
+      foreach ($points as $point => $offset) {
+        // The summary is already reversed, but the break point isn't.
+        $rpos = Unicode::strpos($reversed, strrev($point));
+
+        if ($rpos !== FALSE) {
+          $min_rpos = min($rpos + $offset, $min_rpos);
+        }
+      }
+
+      // If a break point was found in this group, slice and stop searching.
+      if ($min_rpos !== $max_rpos) {
+        // Don't slice with length 0. Length must be <0 to slice from RHS.
+        $summary = ($min_rpos === 0) ? $summary : Unicode::substr($summary, 0, 0 - $min_rpos);
+        break;
+      }
+    }
+  }
+
+  return $summary;
+}
diff --git a/src/Plugin/Field/FieldFormatter/ReadmoreFormatter.php b/src/Plugin/Field/FieldFormatter/ReadmoreFormatter.php
new file mode 100644
index 0000000..2319d11
--- /dev/null
+++ b/src/Plugin/Field/FieldFormatter/ReadmoreFormatter.php
@@ -0,0 +1,206 @@
+<?php
+
+/**
+ * @file
+ * Contains \Drupal\readmore\Plugin\field\FieldFormatter\ReadmoreFormatter.
+ */
+
+namespace Drupal\readmore\Plugin\Field\FieldFormatter;
+
+use Drupal\Component\Utility\Html;
+use Drupal\Component\Utility\Unicode;
+use Drupal\Core\Field\FieldItemListInterface;
+use Drupal\Core\Field\FormatterBase;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Link;
+use Drupal\Core\Render\Markup;
+use Drupal\Core\Url;
+
+/**
+ * Plugin implementation of the 'readmore' formatter.
+ *
+ * @FieldFormatter(
+ *   id = "readmore",
+ *   label = @Translation("Readmore"),
+ *   field_types = {
+ *     "text",
+ *     "text_long",
+ *     "text_with_summary"
+ *   }
+ * )
+ */
+class ReadmoreFormatter extends FormatterBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  public static function defaultSettings() {
+    return array(
+      'trim_length'   => '500',
+      'trim_on_break' => TRUE,
+      'show_readless' => FALSE,
+      'ellipsis'      => TRUE,
+      'wordsafe'      => FALSE,
+    ) + parent::defaultSettings();
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsForm(array $form, FormStateInterface $form_state) {
+    $elements = parent::settingsForm($form, $form_state);
+
+    $elements['trim_length'] = [
+      '#type'          => 'number',
+      '#title'         => $this->t('Trim link text length'),
+      '#field_suffix'  => $this->t('characters'),
+      '#default_value' => $this->getSetting('trim_length'),
+      '#min'           => 1,
+      '#description'   => $this->t('Leave blank to allow unlimited link text lengths.'),
+    ];
+
+    $elements['trim_on_break'] = [
+      '#type'          => 'checkbox',
+      '#title'         => $this->t('Trim on @break', [
+        '@break' => '<!--break-->',
+      ]),
+      '#description'   => $this->t('If @break not found in the text then trim length used.', [
+        '@break' => '<!--break-->',
+      ]),
+      '#default_value' => $this->getSetting('trim_on_break'),
+    ];
+
+    $elements['show_readless'] = [
+      '#type'          => 'checkbox',
+      '#title'         => $this->t('Show read less'),
+      '#default_value' => $this->getSetting('show_readless'),
+    ];
+
+    $elements['ellipsis'] = [
+      '#type'          => 'checkbox',
+      '#title'         => $this->t('Add ellipsis'),
+      '#default_value' => $this->getSetting('ellipsis'),
+    ];
+
+    $elements['wordsafe'] = [
+      '#type'          => 'checkbox',
+      '#title'         => $this->t('Truncate on a word boundary'),
+      '#default_value' => $this->getSetting('wordsafe'),
+    ];
+
+    return $elements;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function settingsSummary() {
+    $summary = [];
+
+    $settings = $this->getSettings();
+
+    if (!empty($settings['trim_on_break'])) {
+      $summary[] = $this->t('Trim on @break', [
+        '@break' => '<!--break-->',
+      ]);
+    }
+    elseif (!empty($settings['trim_length'])) {
+      $summary[] = $this->t('Text trimmed to @limit characters', [
+        '@limit' => $settings['trim_length'],
+      ]);
+    }
+
+    if (!empty($settings['show_readless'])) {
+      $summary[] = $this->t('With read less link');
+    }
+    else {
+      $summary[] = $this->t('Without read less link');
+    }
+
+    if (!empty($settings['ellipsis'])) {
+      $summary[] = $this->t('With ellipsis');
+    }
+    else {
+      $summary[] = $this->t('Without ellipsis');
+    }
+
+    if (!empty($settings['wordsafe'])) {
+      $summary[] = $this->t('Truncate on a word boundary');
+    }
+
+    return $summary;
+  }
+
+  /**
+   * {@inheritdoc}
+   */
+  public function viewElements(FieldItemListInterface $items, $langcode) {
+    $elements = [];
+
+    $settings = $this->getSettings();
+
+    $route_name = \Drupal::routeMatch()->getRouteName();
+    $current_url = Url::fromRoute($route_name);
+
+    $read_less = $this->t('Read less');
+    $read_more = $this->t('Read more');
+
+    // Prepare readless link.
+    $link_less = Link::fromTextAndUrl($read_less, $current_url);
+    $link_less = $link_less->toRenderable();
+    $link_less['#attributes']['class'][] = 'readless-link';
+
+    // Prepare readmore link.
+    $link_more = Link::fromTextAndUrl($read_more, $current_url);
+    $link_more = $link_more->toRenderable();
+    $link_more['#attributes']['class'][] = 'readmore-link';
+
+    foreach ($items as $delta => $item) {
+      $text = $item->value;
+      $text_length = Unicode::strlen($text);
+      $trim_length = $settings['trim_length'];
+
+      // Don't do anything if text length less than defined.
+      if ($text_length > $trim_length) {
+        // Add Read less if need.
+        if ($settings['show_readless']) {
+          $text .= ' ' . render($link_less);
+        }
+
+        // Get trimmed string.
+        $summary = readmore_truncate_string(
+          $text,
+          isset($item->format) ? $item->format : NULL,
+          $trim_length,
+          $settings['wordsafe'],
+          $settings['trim_on_break']
+        );
+
+        // Add readmore link.
+        $summary .= '<span>';
+        $summary .= $settings['ellipsis'] ? $this->t('...') : NULL;
+        $summary .= render($link_more);
+        $summary .= '</span>';
+
+        // Close all HTML tags.
+        $summary = Html::normalize($summary);
+
+        $elements[$delta] = [
+          '#theme'   => 'readmore',
+          '#summary' => Markup::create($summary),
+          '#text'    => Markup::create($text),
+        ];
+      }
+      else {
+        $elements[$delta] = [
+          '#markup' => $text,
+        ];
+      }
+    }
+
+    $elements['#attached']['library'][] = 'readmore/readmore';
+
+    return $elements;
+  }
+
+}
diff --git a/templates/read-more.html.twig b/templates/read-more.html.twig
deleted file mode 100644
index 724622e..0000000
--- a/templates/read-more.html.twig
+++ /dev/null
@@ -1,16 +0,0 @@
-{#
- /**
- * @file
- * Default theme implementation to display a divided text.
- *
- * Available variables:
- * - summary: Truncated string.
- * - text: All text.
- */ 
-#}
-<div class="readmore-summary">
-  {{ summary }}
-</div>
-<div class="readmore-text" style="display:none;">
-  {{ text }}
-</div>
diff --git a/templates/readmore.html.twig b/templates/readmore.html.twig
new file mode 100644
index 0000000..c5e53bc
--- /dev/null
+++ b/templates/readmore.html.twig
@@ -0,0 +1,16 @@
+{#
+/**
+ * @file
+ * readmore.html.twig
+ *
+ * Available variables:
+ * - summary: Truncated string
+ * - text: All text
+ */
+#}
+<div class="readmore-summary">
+  {{ summary }}
+</div>
+<div class="readmore-text">
+  {{ text }}
+</div>
